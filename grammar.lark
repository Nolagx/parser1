// TODO some definitions use a regular expression to make a list, for example free_var_name_list.
// this might cause issues in the semantic check, depending on how lark handles passing the
// tokens in the regex to a function, might have to change the regular expressions to recursive
// list definitions.

// TODO question marks

start: (_NEWLINE)* (statement (_NEWLINE)+)* (statement)?

?statement: relation_declaration
          | fact
          | rule
          | query
          | assign_string
          | assign_span
          | assign_var

assign_string: var_name "=" string -> assign_literal_string
             | var_name "=" "read" "(" string ")" -> assign_string_from_file_string_param
             | var_name "=" "read" "(" var_name ")" -> assign_string_from_file_var_param

assign_span: var_name "=" span

assign_var: var_name "=" var_name

// TODO whitespace after new needed?
relation_declaration: "new" relation_name "(" decl_term ("," decl_term)* ")"

?decl_term: "str" -> decl_string
          | "spn" -> decl_span

rule: rule_head "<-" rule_body_relation ("," rule_body_relation)*

// without "rule" we will get a shift/reduce conflict with relation
rule_head: relation_name "(" free_var_name_list ")"

rule_body_relation: relation -> rule_body_normal_relation
                  | rgx_relation -> rule_body_rgx_relation
                  | ie_relation -> rule_body_ie_relation

// TODO special relation for facts
fact: relation

query: "?" relation

relation: relation_name "(" term ("," term)* ")"

?term: span
     | string
     | var_name
     | free_var_name

// TODO string means we don't check for a valid regex here, leave it to the regex engine?
rgx_relation: "extract" "RGX" "<" string ">" "(" free_var_name_list ")" "from" var_name

ie_relation: function_name "<" var_name ">" "(" free_var_name_list ")"

span: "[" int "," int ")"

int: INT -> integer

string: STRING -> string
       | "(" STRING ((_NEWLINE)* STRING)* ")" -> string

?free_var_name_list: free_var_name ("," free_var_name)*

relation_name: LOWER_CASE_NAME
             | UPPER_CASE_NAME

function_name: LOWER_CASE_NAME
             | UPPER_CASE_NAME

var_name: LOWER_CASE_NAME

free_var_name : UPPER_CASE_NAME


LOWER_CASE_NAME: ("_"|LCASE_LETTER) ("_"|LETTER|DIGIT)*
UPPER_CASE_NAME: UCASE_LETTER ("_"|LETTER|DIGIT)*

_COMMENT: "#" /[^\n]*/

// CNAME: ("_"|LETTER) ("_"|LETTER|DIGIT)*
// common definitions: https://github.com/lark-parser/lark/blob/master/lark/grammars/common.lark

%import common.LCASE_LETTER
%import common.UCASE_LETTER
%import common.LETTER
%import common.DIGIT
%import common.WS_INLINE
%ignore WS_INLINE
%import common.ESCAPED_STRING -> STRING
%import common.INT -> INT
%import common.NEWLINE -> _NEWLINE
%ignore _NEWLINE
%ignore _COMMENT